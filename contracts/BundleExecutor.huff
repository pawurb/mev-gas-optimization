// #include "./lib/ConsoleLog.huff"

//"transfer(address,uint256)"
#define constant ERC20_TRANSFER_SIG = 0xa9059cbb00000000000000000000000000000000000000000000000000000000
//"balanceOf(address)"
#define constant ERC20_BALANCE_OF_SIG = 0x70a0823100000000000000000000000000000000000000000000000000000000
//"swap(uint256,uint256,address,bytes)"
#define constant UNI_SWAP_SIG = 0x022c0d9f00000000000000000000000000000000000000000000000000000000

#define constant EMPTY_BYTES = 0x0000000000000000000000000000000000000000000000000000000000000080

#define constant OWNER = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266

#define constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

#define macro MAIN() = takes (0) returns (0) {
  /* Only owner */
  caller [OWNER] eq iszero accessDenied jumpi

  /* Routing */
  0x0 callvalue eq swap jumpi
  0x1 callvalue eq withdrawToken jumpi
  0x2 callvalue eq withdrawEth jumpi
  0x0 POP_REVERT()

  swap:
    SWAP()

  withdrawToken:
    WITHDRAW_TOKEN()

  withdrawEth:
    WITHDRAW_ETH()

  accessDenied:
    0x0 POP_REVERT()

  stop
}

// Status codes
// 1 - success
// 3 - no profit (revert)
#define macro SWAP() = takes (0) returns (0) {
  // weth to first market
  [ERC20_TRANSFER_SIG] 0x0 mstore // []
  ARG_4() 0x04 mstore // []
  ARG_1() 0x24 mstore // []
  0x20 0x0 0x44 0x0 0x0 [WETH] gas call // [success1]

  // iszero error1 jumpi
  // 0xC9 CONSOLE_LOG_INT() // 201

  // swap1
  [UNI_SWAP_SIG] 0x0 mstore // sig

  ARG_7() 0x00 eq amountOut1Index0 jumpi

  0x0 0x04 mstore // _amount0Out
  ARG_6() 0x24 mstore // _amount1Out

  doswap1 jump

  amountOut1Index0: 
  ARG_6() 0x04 mstore // _amount0Out
  0x0 0x24 mstore // _amount1Out

  doswap1:
  ARG_5() 0x44 mstore // _to
  [EMPTY_BYTES] 0x64 mstore // _data
  0x00 0x0 0xa4 0x0 0x0 ARG_4() gas call // [success2, success1]

  // swap2
  // skip storing sig it's still there
  ARG_9() 0x00 eq amountOut2Index0 jumpi

  0x0 0x04 mstore // _amount0Out
  ARG_8() 0x24 mstore // _amount1Out
  doswap2 jump

  amountOut2Index0: 
  ARG_8() 0x04 mstore // _amount0Out
  0x0 0x24 mstore // _amount1Out

  doswap2:
  address 0x44 mstore
  // skip storing empty _data, it's still there

  0x00 0x0 0xa4 0x0 0x0 ARG_5() gas call // [success3, success2, success1]

  [ERC20_BALANCE_OF_SIG] 0x0 mstore // []
  address 0x04 mstore // []
  0x20 0x0 0x24 0x0 0x0 [WETH] gas call // [success]
  ARG_2() // [balanceBefore]
  0x0 mload // [balanceBefore, currentBalance]
  sub // [wethProfit]

  ARG_3() gt noProfit jumpi // []
  stop

  noProfit:
    0x3 POP_REVERT()
}

// _wethAmountToFirstMarket
#define macro ARG_1() = takes (0) returns (0) {
  0x00 calldataload 0xc0 shr
}

// _wethBalanceBefore
#define macro ARG_2() = takes (0) returns (0) {
  0x08 calldataload 0xc0 shr
}

// _gasCost
#define macro ARG_3() = takes (0) returns (0) {
  0x10 calldataload 0xc0 shr
}

// _target1
#define macro ARG_4() = takes (0) returns (0) {
  0x18 calldataload 0x60 shr
}

// _target2
#define macro ARG_5() = takes (0) returns (0) {
  0x2c calldataload 0x60 shr
}

// amountOut1
#define macro ARG_6() = takes (0) returns (0) {
  0x40 calldataload 0x80 shr
}

// amoutOut1Index
#define macro ARG_7() = takes (0) returns (0) {
  0x50 calldataload 0xF0 shr
}

// amountOut2
#define macro ARG_8() = takes (0) returns (0) {
  0x52 calldataload 0x80 shr
}

// amoutOut2Index
#define macro ARG_9() = takes (0) returns (0) {
  0x62 calldataload 0xF0 shr
}

#define macro WITHDRAW_TOKEN() = takes (0) returns (0) {
  // TODO implement
  stop
}

#define macro WITHDRAW_ETH() = takes (0) returns (0) {
  // TODO implement
  stop
}


#define macro POP_REVERT() = takes (1) returns (0) {
  0x00 mstore
  0x20 0x00 revert
}
